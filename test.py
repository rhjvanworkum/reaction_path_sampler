import numpy as np


mol_string = """
 xtb: 6.5.1 (579679a)
          06162310453D

 32 32  0     0  0            999 V2000
   -3.4857   -2.1002   -0.6111 C   0  0  0  0  0  0  0  0  0  0  0  0
   -2.8005   -0.8565   -0.5651 O   0  0  0  0  0  0  0  0  0  0  0  0
   -1.7650   -0.6655    0.2119 C   0  0  0  0  0  0  0  0  0  0  0  0
   -1.2202   -1.6747    1.0464 C   0  0  0  0  0  0  0  0  0  0  0  0
   -0.1185   -1.4683    1.8069 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.6031   -0.2005    1.7924 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.1578   -0.5060    1.5225 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.6485   -1.4681    2.0214 O   0  0  0  0  0  0  0  0  0  0  0  0
    2.8576    0.4883    0.6609 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.4774    0.3301   -0.8184 C   0  0  0  0  0  0  0  0  0  0  0  0
    3.2272    1.3240   -1.6895 C   0  0  0  0  0  0  0  0  0  0  0  0
    5.0075    1.0021   -1.6759 Cl  0  0  0  0  0  0  0  0  0  0  0  0
   -0.0185    0.8320    0.9712 C   0  0  0  0  0  0  0  0  0  0  0  0
   -1.1446    0.6359    0.2112 C   0  0  0  0  0  0  0  0  0  0  0  0
   -1.5516    1.7088   -0.4903 O   0  0  0  0  0  0  0  0  0  0  0  0
   -2.7928    1.7655   -1.1767 C   0  0  0  0  0  0  0  0  0  0  0  0
   -4.2930   -1.9585   -1.3275 H   0  0  0  0  0  0  0  0  0  0  0  0
   -3.9056   -2.3563    0.3633 H   0  0  0  0  0  0  0  0  0  0  0  0
   -2.8280   -2.8995   -0.9578 H   0  0  0  0  0  0  0  0  0  0  0  0
   -1.7013   -2.6393    1.0704 H   0  0  0  0  0  0  0  0  0  0  0  0
    0.2869   -2.2661    2.4117 H   0  0  0  0  0  0  0  0  0  0  0  0
    0.7209    0.1800    2.8199 H   0  0  0  0  0  0  0  0  0  0  0  0
    3.9306    0.3129    0.7630 H   0  0  0  0  0  0  0  0  0  0  0  0
    2.6298    1.5019    0.9883 H   0  0  0  0  0  0  0  0  0  0  0  0
    1.4107    0.5164   -0.9528 H   0  0  0  0  0  0  0  0  0  0  0  0
    2.7047   -0.6840   -1.1487 H   0  0  0  0  0  0  0  0  0  0  0  0
    2.9136    1.2422   -2.7287 H   0  0  0  0  0  0  0  0  0  0  0  0
    3.0985    2.3468   -1.3402 H   0  0  0  0  0  0  0  0  0  0  0  0
    0.3951    1.8287    0.9734 H   0  0  0  0  0  0  0  0  0  0  0  0
   -3.6317    1.5462   -0.5148 H   0  0  0  0  0  0  0  0  0  0  0  0
   -2.8699    2.7961   -1.5209 H   0  0  0  0  0  0  0  0  0  0  0  0
   -2.8090    1.0978   -2.0392 H   0  0  0  0  0  0  0  0  0  0  0  0
  1  2  1  0  0  0  0
  2  3  4  0  0  0  0
  3  4  4  0  0  0  0
  4  5  2  0  0  0  0
  5  6  1  0  0  0  0
  6  7  1  0  0  0  0
  7  8  2  0  0  0  0
  7  9  1  0  0  0  0
  9 10  1  0  0  0  0
 10 11  1  0  0  0  0
 11 12  1  0  0  0  0
  6 13  1  0  0  0  0
  3 14  1  0  0  0  0
 13 14  2  0  0  0  0
 14 15  1  0  0  0  0
 15 16  1  0  0  0  0
  1 17  1  0  0  0  0
  1 18  1  0  0  0  0
  1 19  1  0  0  0  0
  4 20  1  0  0  0  0
  5 21  1  0  0  0  0
  6 22  1  0  0  0  0
  9 23  1  0  0  0  0
  9 24  1  0  0  0  0
 10 25  1  0  0  0  0
 10 26  1  0  0  0  0
 11 27  1  0  0  0  0
 11 28  1  0  0  0  0
 13 29  1  0  0  0  0
 16 30  1  0  0  0  0
 16 31  1  0  0  0  0
 16 32  1  0  0  0  0
M  CHG  1   1   1
M  END
"""


def get_adj_mat_from_mol_block_string(mol_block_string: str) -> np.ndarray:
    nodes1, nodes2 = [], []

    mol_string_lines = mol_block_string.split('\n')
    for line in mol_string_lines[5:]:
        elements = line.split()
        if len(elements) == 7:
            node1, node2 = int(elements[0]), int(elements[1])
            nodes1.append(node1)
            nodes2.append(node2)

    adj_mat = np.zeros((max(nodes1 + nodes2), max(nodes1 + nodes2)))

    for node1, node2 in zip(nodes1, nodes2):
        adj_mat[node1 - 2, node2 - 1] = 1

    adj_mat = adj_mat + adj_mat.T

    return adj_mat
